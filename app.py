import streamlit as st
import pandas as pd
import plotly.express as px
import os

# --- 1. Configuraci칩n de la p치gina ---
st.set_page_config(layout="wide")
st.title('游뚱 An치lisis de Veh칤culos Usados')
st.write('Explora los datos de veh칤culos usados de manera interactiva.')
st.markdown("---")

# --- 2. Cargar y preparar los datos (con cach칠 y manejo de errores) ---


@st.cache
def load_data():
    """
    Carga, limpia y traduce el archivo de datos.
    Esta funci칩n se ejecuta solo una vez gracias a @st.cache_data.
    """
    # Aseg칰rate de que el archivo 'vehicles_us.csv' est칠 en la misma carpeta que 'app.py'
    file_path = 'vehicles_us.csv'
    if not os.path.exists(file_path):
        st.error(
            f"Error: No se encontr칩 el archivo de datos en la ruta: {file_path}")
        st.stop()

    car_data = pd.read_csv(file_path)

    # Manejar valores nulos
    car_data['model_year'].fillna(
        car_data['model_year'].median(), inplace=True)
    car_data['odometer'].fillna(car_data['odometer'].median(), inplace=True)

    # Traducir los valores de la columna 'condition' a espa침ol
    traducciones_condicion = {
        'new': 'nuevo',
        'like new': 'casi nuevo',
        'excellent': 'excelente',
        'good': 'bueno',
        'fair': 'justo',
        'salvage': 'rescatado'
    }
    car_data['condition'] = car_data['condition'].map(
        traducciones_condicion).fillna(car_data['condition'])

    return car_data


car_data = load_data()

# --- 3. Definir paleta de colores y filtros ---
# Paleta de colores elegante y sutil
colores_sutiles = {
    'nuevo': '#607D8B',         # Gris Pizarra
    'casi nuevo': '#4DB6AC',    # Turquesa
    'excelente': '#81C784',     # Verde Pastel
    'bueno': '#FFB74D',         # Naranja 츼mbar
    'justo': '#FF8A65',         # Naranja Coral
    'rescatado': '#E57373'      # Rojo Suave
}

# Elementos interactivos (filtros en la barra lateral)
st.sidebar.header('Filtros de Datos')

# Filtro por tipo de veh칤culo
tipos_vehiculos = sorted(car_data['type'].unique().tolist())
tipo_seleccionado = st.sidebar.selectbox(
    'Selecciona un tipo de veh칤culo:',
    ['Todos'] + tipos_vehiculos
)

# Filtro por rango de a침o
min_year = int(car_data['model_year'].min())
max_year = int(car_data['model_year'].max())
rango_a침o = st.sidebar.slider(
    'Selecciona un rango de a침o:',
    min_year,
    max_year,
    (min_year, max_year)
)

# Aplicar filtros
if tipo_seleccionado != 'Todos':
    filtered_data = car_data[car_data['type'] == tipo_seleccionado]
else:
    filtered_data = car_data

filtered_data = filtered_data[
    (filtered_data['model_year'] >= rango_a침o[0]) & (
        filtered_data['model_year'] <= rango_a침o[1])
]

# Filtro por modelo de veh칤culo (marca/agencia)
modelos_disponibles = sorted(filtered_data['model'].unique().tolist())
modelo_seleccionado = st.sidebar.selectbox(
    'Selecciona un modelo de veh칤culo:',
    ['Todos'] + modelos_disponibles
)

if modelo_seleccionado != 'Todos':
    filtered_data = filtered_data[filtered_data['model']
                                  == modelo_seleccionado]

# --- 4. Casillas de verificaci칩n para mostrar/ocultar gr치ficos ---
st.header('Visualizaciones')
st.markdown("Selecciona los gr치ficos que deseas ver:")
mostrar_histograma_a침o = st.checkbox('Histograma de A침os del Modelo')
mostrar_dispersion = st.checkbox(
    'Gr치fico de Dispersi칩n: Precio vs Kilometraje')
mostrar_histograma_condicion = st.checkbox('Histograma de la Condici칩n')
mostrar_barras_modelo = st.checkbox(
    'Gr치fico de Barras: Precio Promedio por Modelo')
st.markdown("---")

# --- 5. Validar datos antes de generar gr치ficos ---
if filtered_data.empty:
    st.warning("No hay datos disponibles para los filtros seleccionados.")
    st.info("Intenta ajustar los filtros para ver los resultados.")
else:
    # --- 6. Generar y mostrar los gr치ficos seg칰n la selecci칩n ---
    if mostrar_histograma_a침o:
        st.subheader('游늵 Distribuci칩n de A침os del Modelo por Condici칩n')
        st.write('Este gr치fico muestra la distribuci칩n de los veh칤culos por a침o, ayudando a identificar la antig칲edad de la mayor칤a de los coches en el mercado.')
        fig1 = px.histogram(filtered_data, x='model_year', color='condition',
                            title='Distribuci칩n de A침os del Modelo por Condici칩n',
                            labels={'model_year': 'A침o del Modelo',
                                    'count': 'Cantidad', 'condition': 'Condici칩n'},
                            color_discrete_map=colores_sutiles)

        fig1.update_layout(title_font_size=16, title_x=0.5,
                           plot_bgcolor='white', paper_bgcolor='white')
        st.plotly_chart(fig1, use_container_width=True)
        st.markdown("---")

    if mostrar_dispersion:
        st.subheader('游댌 Relaci칩n entre Precio y Kilometraje por Condici칩n')
        st.write(
            'Este gr치fico muestra la relaci칩n entre el precio del veh칤culo y su kilometraje.')

        fig2 = px.scatter(filtered_data, x='odometer', y='price', color='condition',
                          title='Relaci칩n entre Precio y Kilometraje por Condici칩n',
                          labels={'odometer': 'Kilometraje',
                                  'price': 'Precio ($)', 'condition': 'Condici칩n'},
                          opacity=0.7,
                          color_discrete_map=colores_sutiles)

        fig2.update_layout(title_font_size=16, title_x=0.5,
                           plot_bgcolor='white', paper_bgcolor='white')
        st.plotly_chart(fig2, use_container_width=True)
        st.markdown("---")

    if mostrar_histograma_condicion:
        st.subheader('游뚱 Distribuci칩n de la Condici칩n de los Veh칤culos')
        st.write('Este gr치fico te permite ver la cantidad de veh칤culos disponibles seg칰n su condici칩n, lo cual es 칰til para entender la calidad general de la oferta.')
        fig3 = px.histogram(filtered_data, x='condition', color='condition',
                            title='Distribuci칩n de la Condici칩n de los Veh칤culos',
                            labels={'condition': 'Condici칩n',
                                    'count': 'Cantidad'},
                            category_orders={'condition': [
                                'nuevo', 'casi nuevo', 'excelente', 'bueno', 'justo', 'rescatado']},
                            color_discrete_map=colores_sutiles)

        fig3.update_layout(title_font_size=16, title_x=0.5,
                           plot_bgcolor='white', paper_bgcolor='white', showlegend=False)
        st.plotly_chart(fig3, use_container_width=True)
        st.markdown("---")

    if mostrar_barras_modelo:
        st.subheader('游늳 Precio Promedio por Modelo')
        st.write('Este gr치fico compara el precio promedio de los veh칤culos por marca y modelo, ayudando a los usuarios a evaluar el valor relativo de cada uno.')

        # Calcular el precio promedio por modelo y ordenar
        precio_promedio_modelo = filtered_data.groupby(
            'model')['price'].mean().reset_index().sort_values('price', ascending=False)
        fig4 = px.bar(precio_promedio_modelo, x='model', y='price',
                      title='Precio Promedio por Modelo',
                      labels={'model': 'Modelo del Veh칤culo',
                              'price': 'Precio Promedio ($)'},
                      color='price', color_continuous_scale=px.colors.sequential.Teal)

        fig4.update_layout(title_font_size=16, title_x=0.5,
                           plot_bgcolor='white', paper_bgcolor='white')
        st.plotly_chart(fig4, use_container_width=True)
        st.markdown("---")
